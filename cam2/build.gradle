apply plugin: 'com.android.library'


//apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.afrishberg'
version = '0.7.0'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        classpath 'com.github.dcendents:android-maven-plugin:1.1'
    }

}

dependencies {
    compile 'com.github.clans:fab:1.6.2'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.github.navasmdc:MaterialDesign:1.+@aar'
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
}


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        testApplicationId "com.commonsware.cwac.cam2.test"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'LICENSE.txt' // required for no good reason...
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "$name $version API"
        // description = ''
        source = variant.javaCompile.source
        classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
        options {
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

if (project.hasProperty('PUBLISH_GROUP_ID')) {
    // from http://stackoverflow.com/a/19484146/115145

    android.libraryVariants.all { variant ->
        def name = variant.buildType.name
        if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
            return; // Skip debug builds.
        }
        def task = project.tasks.create "jar${name.capitalize()}", Jar
        task.dependsOn variant.javaCompile
        task.from variant.javaCompile.destinationDir
        task.baseName = "cwac-${PUBLISH_ARTIFACT_ID}"
        task.version = PUBLISH_VERSION
        task.exclude('com/commonsware/cwac/**/BuildConfig.**')
    }

    apply plugin: 'maven'

    uploadArchives {
        repositories.mavenDeployer {
            pom.groupId = PUBLISH_GROUP_ID
            pom.artifactId = PUBLISH_ARTIFACT_ID
            pom.version = PUBLISH_VERSION

            repository(url: LOCAL_REPO)
        }
    }
}

task wrapper(type: Wrapper) {

}